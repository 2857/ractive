[{"title":"Interpolators (Hello world!)","slug":"interpolators-hello-world","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    helloworld: 'Hello world!'\n  }\n});","example":"anglebars.set('helloworld', 'Greetings, my good fellow!');","template":"<p>{{helloworld}}</p>","notes":"<p>A normal mustache <strong>interpolator</strong> looks like this:</p>\n<code>{{helloworld}}</code>\n<p>Text can be changed by calling the <em>.set()</em> method. This doesn't re-render the entire template, just the bits that need to change. Try doing the following:</p>"},{"title":"Formatters","slug":"formatters","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    sometext: 'capitals'\n  },\n  formatters: {\n    uppercase: function ( input ) {\n      return input.toUpperCase();\n    }\n  }\n});","example":"anglebars.set('sometext', 'hawkmen, dive!');","template":"<p>The following text will appear in capitals:</p>\n<p><strong>{{sometext | uppercase}}</strong></p>","notes":"<p>Values can be <strong>formatted</strong> before rendering, using functions passed in on initialization:</p>"},{"title":"Triples","slug":"triples","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    mustache: '<strong>Spot the difference?</strong>'\n  }\n});","example":"anglebars.set('mustache', '<a href=\"http://bit.ly/QOyWC1\">' +\n'<img src=\"http://bit.ly/NkOKHB\"/></a>')","template":"<p>This is a normal mustache:</p>\n<p>{{mustache}}</p>\n<p>And this is a triple mustache:</p>\n<p>{{{mustache}}}</p>","notes":"<p>Anything in a {{{triple}}}, as opposed to a regular {{mustache}}, gets converted to HTML. Try this:</p>"},{"title":"Attributes","slug":"attributes","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    bgcolor: 'black',\n    color: 'white',\n    fontSize: 16,\n    adjective: 'dynamic'\n  }\n});","example":"anglebars.set({\n  bgcolor:'yellow',\n  color:'red',\n  fontSize:24,\n  adjective:'awesome'\n});","template":"<div style=\"background-color: {{bgcolor}}; color: {{color}}; font-size: {{fontSize}}px\">Any attribute can be made {{adjective}}</div>","notes":"<p>As well as text, you can make element <strong>attributes</strong> dynamic. Try this:</p>"},{"title":"Sections (basic)","slug":"sections-basic","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    trueorfalse: true\n  }\n});","example":"anglebars.set('trueorfalse', false);","template":"{{#trueorfalse}}<div>Shown when <em>trueorfalse</em> is true</div>{{/trueorfalse}}","notes":"<p>A <strong>section</strong> looks like this:</p>\n<code>{{#section}}section content goes here, and can include anything{{/section}}</code>\n<p>The contents will be shown or hidden depending on the value of <em>section</em> &ndash; if it isn't falsy, it will render (empty arrays are considered falsy in this context). Try this:</p>"},{"title":"Sections (inverted)","slug":"sections-inverted","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    trueorfalse: true\n  }\n});","example":"anglebars.set('trueorfalse', false);","template":"{{^trueorfalse}}<div>Shown when <em>trueorfalse</em> is false</div>{{/trueorfalse}}","notes":"<p>An <strong>inverted section</strong> looks like this:</p>\n<code>{{^section}}inverted section content goes here{{/section}}</code>\n<p>The contents will be shown or hidden depending on the value of <em>section</em> &ndash; if it <em>is</em> falsy, it will render (empty arrays are considered falsy in this context). Try this:</p>"},{"title":"Sections (as context)","slug":"sections-as-context","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    character: {\n      firstname: 'Arnold',\n      lastname: 'Rimmer',\n      mugshot: 'arnold.jpg',\n      quote: 'Boarding this vessel is an act of war. Ergo we surrender.'\n    }\n  }\n});","example":"anglebars.set('character',{\n  firstname: 'Ace',\n  lastname: 'Rimmer',\n  mugshot: 'ace.jpg',\n  quote: 'Smoke me a kipper, I\\'ll be back for breakfast.'\n});","template":"{{#character}}\n<img src=\"assets/{{mugshot}}\"/>\n<p><strong>{{firstname}} {{lastname}}</strong></p>\n<p>\"{{quote}}\"</p>\n{{/character}}\n<br style=\"clear:both;\"/>","notes":"<p>Sections can provide <strong>context</strong>:</p>"},{"title":"Sections (as lists)","slug":"sections-as-lists","setup":"var list = [\n  { firstname: 'Harold',   lastname: 'Wilson',    from: 1964, to: 1970, party: 'Labour' },\n  { firstname: 'Edward',   lastname: 'Heath',     from: 1970, to: 1974, party: 'Conservative' },\n  { firstname: 'Harold',   lastname: 'Wilson',    from: 1974, to: 1976, party: 'Labour' }  ,\n  { firstname: 'James',    lastname: 'Callaghan', from: 1976, to: 1979, party: 'Labour' },\n  { firstname: 'Margaret', lastname: 'Thatcher',  from: 1979, to: 1990, party: 'Conservative' }\n];\n\nvar anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    primeMinisters: list\n  }\n});","example":"var jimHacker = {\n  firstname: 'Jim',\n  lastname: 'Hacker',\n  from: 1986,\n  to: 1990,\n  party: 'Unknown'\n};\nlist.push(jimHacker);\nlist[4].to = 1986;\nanglebars.update('primeMinisters');","template":"<p>Prime Ministers of the United Kingdom:</p>\n<ul>\n{{#primeMinisters}}<li class=\"{{party}}\">{{firstname}} {{lastname}} ({{from}} &ndash; {{to}})</li>{{/primeMinisters}}\n</ul>","notes":"<p>If the value of a section's mustache is an <strong>array</strong>, the section will be repeated once for each item in the array, with said item as context.</p>\n<p>You can modify the array using the familiar <em>pop</em>, <em>push</em>, <em>unshift</em>, <em>shift</em>, <em>splice</em>, <em>sort</em> and <em>reverse</em> methods, and the view will update accordingly. Either of these will work in the example below:</p>\n<code>anglebars.get('primeMinisters').push(jimHacker);</code>\n<code>list.push(jimHacker);</code>\n<p>If you modify the contents of an array using <em>anglebars.set()</em>, the view will update as usual. Of course, sometimes the contents will change as a consequence of something else. In these situations you can manually trigger an update with <em>anglebars.update()</em>. In the example below, once we've added Jim Hacker, we need to correct Margaret Thatcher's historical record &ndash; these two snippets will achieve the same thing:</p>\n<code>anglebars.set('primeMinisters.4.to', 1986);</code>\n<code>list[4].to = 1986;<br/>anglebars.update('primeMinisters');</code>"},{"title":"Context nesting","slug":"context-nesting","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    reality: {\n      kick: 'However deeply nested we are, we can still get back to the top',\n      level: 'one',\n      setting: 'The Airplane',\n      dream: {\n        level: 'two',\n        setting: 'The City',\n        dreamer: 'Yusuf',\n        dream: {\n          level: 'three',\n          setting: 'The Hotel',\n          dreamer: 'Arthur',\n          dream: {\n            level: 'four',\n            setting: 'The Snow Fortress',\n            dreamer: 'Eames',\n            dream: {\n              level: 'five',\n              setting: 'Limbo',\n              dreamer: 'Cobb'\n            }\n          }\n        }\n      }\n    }\n  }\n});","example":"anglebars.set({\n  'reality.dream.dreamer': 'Dileep Rao',\n  'reality.dream.dream.dreamer': 'Joseph Gordon-Levitt',\n  'reality.dream.dream.dream.dreamer': 'Tom Hardy',\n  'reality.dream.dream.dream.dream.dreamer': 'Leonardo DiCaprio'\n});","template":"<p>The plot of <em>Inception</em>:</p>\n{{#reality}}\n<ul>\n  <li>Level {{level}}: {{setting}}</li>\n  {{#dream}}\n    <li>Level {{level}}: {{setting}} ({{dreamer}}'s dream)</li>\n    {{#dream}}\n      <li>Level {{level}}: {{setting}} ({{dreamer}}'s dream)</li>\n      {{#dream}}\n        <li>Level {{level}}: {{setting}} ({{dreamer}}'s dream)</li>\n        {{#dream}}\n          <li>Level {{level}}: {{setting}} ({{dreamer}}'s dream)</li>\n          <li><strong>{{kick}}</strong></li>\n        {{/dream}}\n      {{/dream}}\n    {{/dream}}\n  {{/dream}}\n</ul>\n{{/reality}}","notes":"<p>Sections can be <strong>nested</strong> to arbitrary levels, and Anglebars will figure out what you're referring to. It is thus possible, though not recommended, to recreate the plot of <em>Inception</em> using mustaches. Note that we can still find the value of <em>kick</em> when the current context is the final <em>dream</em>:</p>"},{"title":"Two-way data binding","slug":"twoway-data-binding","setup":"var anglebars = new Anglebars({\n  el: 'output',\n  template: $('#template').text(),\n  data: {\n    user: {\n      firstname: 'new',\n      lastname: 'user'\n    },\n    fontSize: 16\n  },\n  formatters: {\n    percent: function ( input ) {\n      return input / 100;\n    }\n  }\n});","example":"","template":"<p style=\"font-size: {{fontSize}}px; opacity: {{opacity | percent}}\">Hello {{#user}}{{firstname}} {{lastname}}{{/user}}!</p>\n<label>\n  Your first name:\n  <input data-bind=\"user.firstname\" value=\"new\"/>\n</label>\n<label>\n  Your last name:\n  <input data-bind=\"user.lastname\" value=\"user\"/>\n</label>\n<label>\n  Font size:\n  <input type=\"number\" data-bind=\"fontSize\" value=\"16\"/>\n</label>\n<label>\n  Opacity (%):\n  <input type=\"range\" data-bind=\"opacity\" value=\"100\"/>\n</label>\n<br style='clear:both;'/>","notes":"<p><strong>Input</strong> and <strong>textarea</strong> elements can update Anglebars data without you having to bother adding event listeners. Just add a <em>data-bind</em> attribute corresponding to the data you want to keep updated.</p>\n<p>By default, the data will be updated every time the content of the input changes, because under the hood we're binding to both <em>change</em> and <em>keyup</em> events. Sometimes that's undesirable and you only want to react to <em>change</em> events (i.e. when the user hits Enter or tabs out of the input) &ndash; if that applies, pass in <em>lazy: true</em> as an initialization option.</p>"},{"title":"SVG","slug":"svg","setup":"","example":"","template":"","notes":""},{"title":"One view model, many views","slug":"one-view-model-many-views","setup":"","example":"","template":"","notes":""},{"title":"Missing data","slug":"missing-data","setup":"","example":"","template":"","notes":""}]