{
  "name": "amdclean",
  "version": "1.5.0",
  "description": "A build tool that converts AMD code to standard JavaScript",
  "main": "./src/amdclean",
  "repository": {
    "type": "git",
    "url": "https://github.com/gfranko/amdclean.git"
  },
  "keywords": [
    "amd",
    "requirejs",
    "modules",
    "convert"
  ],
  "author": {
    "name": "Greg Franko",
    "url": "http://gregfranko.com"
  },
  "scripts": {
    "test": "jasmine-node test/specs/ --matchall"
  },
  "dependencies": {
    "esprima": "1.x",
    "lodash": "2.x",
    "estraverse": "1.x",
    "escodegen": "1.x"
  },
  "devDependencies": {
    "jasmine-node": "1.x",
    "gulp": "~3.2.1",
    "gulp-uglify": "~0.1.0",
    "gulp-jshint": "~1.3.2",
    "gulp-jasmine": "~0.1.1",
    "gulp-rename": "~0.2.1",
    "jasmine-only": "~0.1.0"
  },
  "engine": {
    "node": ">= 0.8"
  },
  "license": "MIT",
  "readme": "#amdclean\n\nA build tool that converts AMD code to standard JavaScript.\n\n[![Build Status](https://travis-ci.org/gfranko/amdclean.png?branch=master)](https://travis-ci.org/gfranko/amdclean)\n[![NPM version](https://badge.fury.io/js/amdclean.png)](http://badge.fury.io/js/amdclean)\n\n`npm install amdclean --save-dev`\n\n[Getting Started Video](http://www.youtube.com/watch?v=wbEloOLU3wM)\n\n\n## Use Case\n\n**Single file** client-side JavaScript libraries or web apps that want to use AMD to structure and build their code, but don't want an AMD footprint.\n\n\n## Used By\n\n* [Backbone-Require-Boilerplate](https://github.com/BoilerplateMVC/Backbone-Require-Boilerplate) - A Rad Backbone.js and Require.js Boilerplate Project\n\n* [Ractive.js](http://www.ractivejs.org/) - Next-generation DOM manipulation\n\n* [AddThis Smart Layers](https://www.addthis.com/get/smart-layers) - Third-party social widgets suite\n\n* [Mod.js](http://madscript.com/modjs/) - JavaScript Workflow Tooling \n\n\n## Why\n\nMany developers like to use the AMD API to write modular JavaScript, but do not want to include a full AMD loader (e.g. [require.js](https://github.com/jrburke/requirejs)), or AMD shim (e.g. [almond.js](https://github.com/jrburke/almond)) because of file size/source code readability concerns.\n\nBy incorporating amdclean.js into the build process, there is no need for Require or Almond.\n\nSince AMDclean rewrites your source code into standard JavaScript, it is a great\nfit for JavaScript library/web app authors who want a tiny download in one file after using the\n[RequireJS Optimizer](http://requirejs.org/docs/optimization.html).\n\n\n## Restrictions\n\n**Note:** Same restrictions as almond.js.\n\nIt is best used for libraries or apps that use AMD and optimize all the modules into one file -- no dynamic code loading.\n\n\n##What is Supported\n\n* `define()` and `require()` calls.\n\n* [Shimmed modules](http://requirejs.org/docs/api.html#config-shim)\n\n* [Simplified CJS wrapper](https://github.com/jrburke/requirejs/wiki/Differences-between-the-simplified-CommonJS-wrapper-and-standard-AMD-define#wiki-cjs) (requires the `globalObject` option to be set to `true`)\n\n* Exporting global modules to the global `window` object\n\n* Storing all local modules inside of a single global object (Helps scoping issues for certain use cases)\n\n## Download\n\nNode - `npm install amdclean --save-dev`\n\nWeb - [Latest release](https://github.com/gfranko/amdclean/blob/master/src/amdclean.js)\n\n\n## Usage\n\nThere are a few different ways that amdclean can be used including:\n\n* With the RequireJS Optimizer (plain node, Grunt, Gulp, etc)\n\n* As a standalone node module\n\n* As a client-side library\n\n\n###RequireJS Optimizer\n\n* [Download the RequireJS optimizer](http://requirejs.org/docs/download.html#rjs).\n\n* `npm install amdclean --save-dev`\n\n* Make sure that each of your AMD modules have a module ID `path` alias name (this is not required, but a good idea)\n\n```javascript\npaths: {\n\n  'first': '../modules/firstModule',\n\n  'second': '../modules/secondModule',\n\n  'third': '../modules/thirdModule'\n\n}\n```\n\n* Add an `onModuleBundleComplete` config property to your RequireJS build configuration file instead.  Like this:\n\n```javascript\nonModuleBundleComplete: function (data) {\n  var fs = module.require('fs'),\n    amdclean = module.require('amdclean'),\n    outputFile = data.path;\n  fs.writeFileSync(outputFile, amdclean.clean({\n    'filePath': outputFile\n  }));\n}\n```\n\n* Run the optimizer using [Node](http://nodejs.org) (also [works in Java](https://github.com/jrburke/r.js/blob/master/README.md)).  More details can be found in the the [r.js](https://github.com/jrburke/r.js/) repo.\n\n* If you are using the RequireJS optimizer [Grunt task](https://github.com/gruntjs/grunt-contrib-requirejs), then it is very easy to integrate amdclean using either the `onBuildWrite` or the `onModuleBundleComplete` config options. Here is an example Grunt file that includes the RequireJS optimizer plugin with amdclean support:\n\n```javascript\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    requirejs: {\n      js: {\n        options: {\n          findNestedDependencies: true,\n          baseUrl: 'src/js/app/modules',\n          wrap: true,\n          preserveLicenseComments: false,\n          optimize: 'none',\n          mainConfigFile: 'src/js/app/config/config.js',\n          include: ['first'],\n          out: 'src/js/app/exampleLib.js',\n          onModuleBundleComplete: function (data) {\n            var fs = require('fs'),\n              amdclean = require('amdclean'),\n              outputFile = data.path;\n            fs.writeFileSync(outputFile, amdclean.clean({\n              'filePath': outputFile\n            }));\n          }\n        }\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-contrib-requirejs');\n  grunt.registerTask('build', ['requirejs:js']);\n  grunt.registerTask('default', ['build']);\n};\n```\n\n###Node Module\n\n* `npm install amdclean --save-dev`\n\n* Require the module\n\n```javascript\nvar amdclean = require('amdclean');\n```\n\n* Call the clean method\n\n```javascript\nvar code = 'define(\"exampleModule\", function() {});'\nvar cleanedCode = amdclean.clean(code);\n```\n\n\n###Client-side Library\n\n* Include all dependencies\n\n```html\n<script src=\"http://esprima.org/esprima.js\"></script>\n<script src=\"http://constellation.github.io/escodegen/escodegen.browser.js\"></script>\n<script src=\"https://rawgithub.com/Constellation/estraverse/master/estraverse.js\"></script>\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.2.1/lodash.js\"></script>\n<script src=\"https://rawgithub.com/gfranko/amdclean/master/src/amdclean.js\"></script>\n```\n\n* Use the global `amdclean` object and `clean()` method\n\n```javascript\nvar cleanedCode = amdclean.clean('define(\"example\", [], function() { var a = true; });');\n```\n\n## Requirements\n\n* [Esprima](https://github.com/ariya/esprima) 1.0+\n\n* [Lodash](https://github.com/lodash/lodash) 2.2.1+\n\n* [Estraverse](https://github.com/Constellation/estraverse) 1.3.1+\n\n* [Escodegen](https://github.com/Constellation/escodegen) 0.0.27+\n\n## Optional Dependencies\n\n* [r.js](https://github.com/jrburke/r.js/) 2.1.0+\n\n\n## How it works\n\namdclean uses Esprima to generate an AST (Abstract Syntax Tree) from the provided source code, estraverse to traverse and update the AST, and escodegen to generate the new standard JavaScript code.  There are a few different techniques that amdclean uses to convert AMD to standard JavaScript code:\n\n\n###Define Calls\n\n_AMD_\n\n```javascript\ndefine('example', [], function() {\n\n});\n```\n\n_Standard_\n\n```javascript\nvar example = function () {\n\n}();\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine('example', [], function() {\n  return function(name) {\n    return 'Hello ' + name;\n  };\n});\n```\n\n_Standard_\n\n```javascript\nvar example = function (name) {\n  return 'Hello ' + name;\n};\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine('example', [], function() {\n  return 'I love AMDClean';\n});\n```\n\n_Standard_\n\n```javascript\nvar example = 'I love AMDClean';\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine('example', ['example1', 'example2'], function(one, two) {\n\n});\n```\n\n\n_Standard_\n\n```javascript\nvar example = function (one, two) {\n\n}(example1, example2);\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine(\"backbone\", [\"underscore\",\"jquery\"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.Backbone;\n    };\n}(this)));\n```\n\n\n_Standard_\n\n```javascript\nvar backbone = window.Backbone;\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine('third',{\n  exampleProp: 'This is an example'\n});\n```\n\n_Standard_\n\n```javascript\nvar third = {\n  exampleProp: 'This is an example'\n};\n```\n\n---\n\n###Require Calls\n\n**Note:** `require(['someModule'])` calls are removed from the built source code\n\n_AMD_\n\n```javascript\nrequire([], function() {\n  var example = true;\n});\n```\n\n_Standard_\n\n```javascript\n(function () {\n    var example = true;\n}());\n```\n\n---\n\n_AMD_\n\n```javascript\nrequire(['anotherModule'], function(anotherModule) {\n  var example = true;\n});\n```\n\n_Standard_\n\n```javascript\n(function (anotherModule) {\n    var example = true;\n}(anotherModule));\n```\n\n\n##Options\n\nThe amdclean `clean()` method accepts a string or an object.  Below is an example object with all of the available configuration options:\n\n```javascript\namdclean.clean({\n  // The source code you would like to be 'cleaned'\n  'code': '',\n  // The relative file path of the file to be cleaned.  Use this option if you\n  // are not using the code option.\n  // Hint: Use the __dirname trick\n  'filePath': '',\n  // The modules that you would like to set as window properties\n  // An array of strings (module names)\n  'globalModules': [],\n  // Determines if all of your local modules are stored in a single global\n  // object (helps with scoping in certain cases)\n  'globalObject': false,\n  // Determines the name of your global object that stores all of your global\n  // modules\n  // Note: If using a global object, try to override this name with a smaller\n  //       name since it will be referenced throughout the code (don't worry\n  //       about it if you are using a minifier)\n  'globalObjectName': 'amdclean',\n  // All esprima API options are supported: http://esprima.org/doc/\n  'esprima': {\n    'comment': true,\n    'loc': true,\n    'range': true,\n    'tokens': true\n  },\n  // All escodegen API options are supported: https://github.com/Constellation/escodegen/wiki/API\n  'escodegen': {\n    'comment': true\n  },\n  // If there is a comment (that contains the following text) on the same line\n  // or one line above a specific module, the module will not be removed\n  'commentCleanName': 'amdclean',\n  // The ids of all of the modules that you would not like to be 'cleaned'\n  'ignoreModules': [],\n  // Determines which modules will be removed from the cleaned code\n  'removeModules': [],\n  // Determines if all of the require() method calls will be removed\n  'removeAllRequires': false,\n  // Determines if all of the 'use strict' statements will be removed\n  'removeUseStricts': true,\n  // Allows you to pass an expression that will override shimmed modules return\n  // values e.g. { 'backbone': 'window.Backbone' }\n  'shimOverrides': {},\n  // Prevents multiple global objects from being instantiated when using the\n  // onBuildWrite Require.js hook\n  // Set this to false if you are using AMDClean for more than one build AND\n  // are using the onModuleBundleComplete Require.js hook\n  'rememberGlobalObject': true,\n  // Determines how to prefix a module name with when a non-JavaScript\n  // compatible character is found \n  // 'standard' or 'camelCase'\n  // 'standard' example: 'utils/example' -> 'utils_example'\n  // 'camelCase' example: 'utils/example' -> 'utilsExample'\n  'prefixMode': 'standard',\n  // A hook that allows you add your own custom logic to how each moduleName is\n  // prefixed/normalized\n  'prefixTransform': function(moduleName) { return moduleName; },\n  // Wrap any build bundle in a start and end text specified by wrap\n  // This should only be used when using the onModuleBundleComplete RequireJS\n  // Optimizer build hook\n  // If it is used with the onBuildWrite RequireJS Optimizer build hook, each\n  // module will get wrapped\n  'wrap': {\n    'start': '',\n    'end': ''\n  }\n})\n```\n\n\n## Unit Tests\n\nAll unit tests are written using the [jasmine-node](https://github.com/mhevery/jasmine-node) library and can be found in the `test/specs/` folder.  You can run the unit tests by typing: `npm test`.\n\n## Contributing\n\nPlease send all PR's to the `dev` branch.\n\nIf your PR is a code change:\n\n1.  Update `amdclean.js` inside of the `src` directory.\n2.  Add a Jasmine unit test to `convert.js` inside of the `test/specs` folder\n3.  Install all node.js dev dependencies: `npm install`\n4.  Install gulp.js globally: `sudo npm install gulp -g`\n5.  Lint, Minify, and Run all unit tests with Gulp: `gulp`\n6.  Verify that the minified output file has been updated in `build/amdclean.min.js`\n7.  Send the PR!\n\n**Note:** There is a gulp `watch` set up called, `amdclean-watch`, that will automatically lint, minify, and run all the AMDClean unit tests when `src/amdclean.js` is changed.  Feel free to use it.\n\n\n## FAQ\n\n__Why would I use AMDClean instead of Almond.js?__\n\n - Although Almond is very small (~1k gzipped and minified), most JavaScript library authors do not want to have to include it in their library's source code.  AMDClean allows you to use AMD without increasing your library's file size.\n\n__Do I have to use the onModuleBundleComplete Require.js hook?__\n\n - Nope, you may use the `onBuildWrite` Require.js hook instead.  Like this:\n```javascript\nonBuildWrite: function (moduleName, path, contents) {\n    return module.require('amdclean').clean(contents);\n}\n```\n\n__AMDClean does not seem to be cleaning shimmed modules.  What am I doing wrong?__\n\n - Since Require.js does not expose the [shim](http://requirejs.org/docs/api.html#config-shim) functionality within the `onBuildWrite` config property, you must use the `onModuleBundleComplete` config property instead.  Like this:\n\n ```javascript\nonModuleBundleComplete: function (data) {\n  var fs = require('fs'),\n    amdclean = require('amdclean'),\n    outputFile = data.path;\n  fs.writeFileSync(outputFile, amdclean.clean({\n    'filePath': outputFile,\n    'globalObject': true\n  }));\n}\n ```\n \n__Is AMDClean only for libraries, or can I use it for my web app?__\n\n - You can use it for both!  The [0.6.0](https://github.com/gfranko/amdclean/releases/tag/0.6.0) release provided support for web apps.\n\n__My comments seem to be getting removed when I use AMDClean.  What am I doing wrong?__\n\n - Before the `1.0.0` release, this was the default behavior.  If you update to `1.0.0` or later, you should see your comments still there after the cleaning process.  Also, if you would like your comments to be removed, then you can set the `comment` **escodegen** option to `false`.\n\n__What if I don't want all define() and require() method calls to be removed?__\n\n - If you don't want one or more define() and require() methods to be removed by `amdclean`, you have a few options.  If the module has a named module id associated with it, then you can add the associated module id to the `ignoreModules` option array.  Like this:\n\n ```javascript\nvar amdclean = require('amdclean');\namdclean.clean({\n    'code': 'define(\"randomExample\", function() { console.log(\"I am a random example\"); });',\n    'ignoreModules': ['randomExample']\n});\n ```\n\n If there is not an associated module id, then you must put a comment with only the words _amdclean_ on the same line or one line above the method in question.  For example, `amdclean` would not remove the `define()` method below:\n\n ```javascript\n// amdclean\ndefine('example', [], function() {});\n ```\n\nIf you want to use different text than `amdclean`, you can customize the comment name by using the `commentCleanName` option.\n\n__Why are define() method placeholder functions inserted into my source?__\n\n- This is the default behavior of r.js when a module(s) is not wrapped in a define() method.  Luckily,  this behavior can be overridden by setting the `skipModuleInsertion` option to `true` in your build configuration.\n\n__How would I expose one or more modules as a global window property?__\n\n- You can use the `globalModules` option to list all of the modules that you would like to expose as a `window` property\n\n__I am having a scope problem with all of the local module variables.  What can I do?__\n\n- You can use the `globalObject` option to store all of your modules in a single global object that uses the top-most function scope.  You can even name that global object whatever you prefer by using the `globalObjectName` option.\n\n__I replaced Almond.js with AMDClean and my file is bigger.  Why Is This?__\n\n- There could be a couple of reasons:\n\n  * Unneccessary files are still being included with your build. Make sure that both Almond.js and the RequireJS text! plugin are not still being included, since they are not needed.  You can use the `removeModules` option to make sure certain modules are not included (e.g. text plugin).\n\n  * You are using AMDClean `0.6.0` or earlier.  The latest versions of AMDClean do a better job of optimizing modules.  Check out these release notes about optimization improvements: https://github.com/gfranko/amdclean/releases/tag/0.7.0 https://github.com/gfranko/amdclean/releases/tag/1.1.0\n\n  *  Many of your individual module names are pretty long since they include the full path to a file.  An example is `text_templates_headinghtml`.  This module name could be changed to just `headinghtml` to save space. You can override the AMDClean module naming logic with the `prefixTransform` option to save some space.\n\n__I am building a JavaScript library and want to provide conditional AMD support, but AMDClean seems to be wiping away my if statement.  How do I fix this?__\n\n- Make sure that you have a comment (that matches your AMDClean `commentCleanName` option) one line above your conditional AMD if statement\n\n__I don't like the way AMDClean normalizes the names of my modules with underscores.  Can I change this?__\n\n- You sure can.  You can either use the `prefixMode` and change it to camelCase, or you can override all of the logic with your own logic by using the `prefixTransform` option hook.\n\n\n## License\n\nCopyright (c) 2014 Greg Franko Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gfranko/amdclean/issues"
  },
  "homepage": "https://github.com/gfranko/amdclean",
  "_id": "amdclean@1.5.0",
  "_from": "amdclean@~1.5.0"
}
